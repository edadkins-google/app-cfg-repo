steps:
# This step deploys the new version of our container image
# in the hello-cloudbuild Kubernetes Engine cluster.

- name: gcr.io/cloud-builders/gcloud
  entrypoint: 'bash'
  args: [ '-c', 'gcloud secrets versions access latest --secret=github-ssh-key > /root/.ssh/id_github' ]
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# Set up git with key and domain
- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    chmod 600 /root/.ssh/id_github
    cat <<EOF >/root/.ssh/config
    Hostname github.com
    IdentityFile /root/.ssh/id_github
    EOF
    ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# This step copies the applied manifest to the production branch
# The COMMIT_SHA variable is automatically
# replaced by Cloud Build.


- name: 'gcr.io/cloud-builders/git'
  id: Copy to production branch
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    set -x && \
    # Configure Git to create commits with Cloud Build's service account
    # Switch to the production branch and copy the kubernetes.yaml file from the candidate branch
    git clone git@github.com:ejmadkins/env-repo.git && cd env-repo && \
    git checkout production && \
    git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)') && \
    # Create a new deployment branch and PR
    git checkout -b deployment/$COMMIT_SHA && \
    git checkout $COMMIT_SHA prod/prod.yaml && \
    # Commit the kubernetes.yaml file with a descriptive commit message
    git commit -m "Manifest from commit $COMMIT_SHA
    $(git log --format=%B -n 1 $COMMIT_SHA)" && \
    # Push the changes back to GitHub
    git push git@github.com:ejmadkins/env-repo.git
  volumes:
  - name: 'ssh'
    path: /root/.ssh